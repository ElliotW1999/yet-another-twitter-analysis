
# This workflow will build and push a new container image to Amazon ECR,
# when there is a push to the "main" branch that updates source code.
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.  

name: Build Docker Image and deploy to AWS

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: ["src/**"]

env:
  AWS_REGION: us-west-2                                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: yet-another-twitter-analysis-ecr           # set this to your Amazon ECR repository name
  CONTAINER_NAME: data_ingestion                             # set this to the name of the container in the
                                                             # containerDefinitions section of your task definition (my-image-name:$(date +%s))
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  
permissions:
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }} 

  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME" -f docker/main.dockerfile .
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_NAME"

    - name: Get EC2 Public IP
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=twitter_data" \
        --query "Reservations[0].Instances[0].PublicIpAddress" \
        --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.PUBLIC_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          export my_container="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.CONTAINER_NAME }}"
          sudo docker stop $my_container || true
          sudo docker rm $my_container || true
          sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$my_container
          sudo docker run -d --name $my_container -p 80:80 ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$my_container   
      
